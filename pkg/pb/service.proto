syntax = "proto3";

package service;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";

option go_package = "github.com/bwoodworthIBLX/demo_contacts/pkg/pb;pb";

// The DemoContacts service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change 
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

// Happy protobuffing!

// TODO: Write a protobuf schema for the DemoContacts service. The 
// messages and RPCs will compose the API for the service.

// TODO: Structure your own protobuf messages. Each protocol buffer message is a 
// small logical record of information, containing a series of name-value pairs.
message VersionResponse {
  string version = 1;
}

message Contact {
  int64 id = 1;

  string first_name = 2;

  string middle_name = 3;

  string last_name = 4;

  string email = 5;

  string home_address = 6;
}

message ReverseRequest {
  Contact payload = 1;
}

message ReverseResponse {
  string result = 1;
}


// TODO: Define the DemoContacts service and its methods. Feel free
// to change the name of DemoContacts to better-suit your naming
// conventions.
service DemoContacts {
  rpc GetVersion (google.protobuf.Empty) returns (VersionResponse) {
    // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }

  rpc Reverse (ReverseRequest) returns (ReverseResponse) {
    option (google.api.http) = {
    post: "/reverse"
    body: "payload"
    };
  }

}
